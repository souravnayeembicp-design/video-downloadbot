import os
import tempfile
import random
import subprocess
from uuid import uuid4
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, MessageHandler, CallbackQueryHandler, filters, ContextTypes
from yt_dlp import YoutubeDL
from PIL import Image

TOKEN = os.getenv("BOT_TOKEN")
WEBHOOK_URL = os.getenv("WEBHOOK_URL")

# ‡¶∏‡ßá‡¶∂‡¶® ‡¶°‡ßá‡¶ü‡¶æ
user_sessions = {}

# Random ffmpeg filters
FILTERS = [
    "hue=s=0",  # black & white
    "eq=contrast=1.5:brightness=0.05",  # contrast & brightness
    "negate",  # invert colors
    "hue=h=90",  # color shift
]

def apply_ffmpeg_filter(input_path, output_path, logo_path, position):
    # Random filter select
    filter_choice = random.choice(FILTERS)

    # Logo position mapping
    positions = {
        "top_left": "(10,10)",
        "top_right": "(main_w-overlay_w-10,10)",
        "bottom_left": "(10,main_h-overlay_h-10)",
        "bottom_right": "(main_w-overlay_w-10,main_h-overlay_h-10)",
    }
    pos = positions[position]

    # Prepare ffmpeg command
    command = [
        "ffmpeg", "-y",
        "-i", input_path,
        "-i", logo_path,
        "-filter_complex", f"[0:v] {filter_choice} [v]; [v][1:v] overlay={pos}",
        "-c:a", "copy",
        output_path
    ]
    subprocess.run(command, check=True)

# /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("üëã ‡¶π‡ßç‡¶Ø‡¶æ‡¶≤‡ßã! ‡¶Ü‡¶Æ‡¶æ‡¶ï‡ßá ‡¶≠‡¶ø‡¶°‡¶ø‡¶ì ‡¶≤‡¶ø‡¶ô‡ßç‡¶ï ‡¶™‡¶æ‡¶†‡¶æ‡¶ì‡•§")

# ‡¶≤‡¶ø‡¶ô‡ßç‡¶ï ‡¶π‡ßç‡¶Ø‡¶æ‡¶®‡ßç‡¶°‡¶≤‡¶æ‡¶∞
async def handle_link(update: Update, context: ContextTypes.DEFAULT_TYPE):
    url = update.message.text.strip()
    user_id = update.message.from_user.id
    user_sessions[user_id] = {"video_url": url}

    await update.message.reply_text("üîó ‡¶≤‡¶ø‡¶ô‡ßç‡¶ï ‡¶™‡ßá‡ßü‡ßá‡¶õ‡¶ø‡•§ ‡¶è‡¶¨‡¶æ‡¶∞ ‡¶≤‡ßã‡¶ó‡ßã ‡¶™‡¶æ‡¶†‡¶æ‡¶ì (‡¶á‡¶Æ‡ßá‡¶ú ‡¶™‡¶æ‡¶†‡¶æ‡¶ì)‡•§")

# ‡¶≤‡ßã‡¶ó‡ßã ‡¶π‡ßç‡¶Ø‡¶æ‡¶®‡ßç‡¶°‡¶≤‡¶æ‡¶∞
async def handle_logo(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.message.from_user.id
    if user_id not in user_sessions or "video_url" not in user_sessions[user_id]:
        await update.message.reply_text("‚ö†Ô∏è ‡¶Ü‡¶ó‡ßá ‡¶≠‡¶ø‡¶°‡¶ø‡¶ì ‡¶≤‡¶ø‡¶ô‡ßç‡¶ï ‡¶™‡¶æ‡¶†‡¶æ‡¶ì‡•§")
        return

    logo_file = await update.message.photo[-1].get_file()
    logo_path = os.path.join(tempfile.gettempdir(), f"{uuid4()}.png")
    await logo_file.download_to_drive(logo_path)
    user_sessions[user_id]["logo_path"] = logo_path

    keyboard = [
        [InlineKeyboardButton("‡¶â‡¶™‡¶∞ ‡¶¨‡¶æ‡¶Å", callback_data="top_left"),
         InlineKeyboardButton("‡¶â‡¶™‡¶∞ ‡¶°‡¶æ‡¶®", callback_data="top_right")],
        [InlineKeyboardButton("‡¶®‡¶ø‡¶ö‡ßá ‡¶¨‡¶æ‡¶Å", callback_data="bottom_left"),
         InlineKeyboardButton("‡¶®‡¶ø‡¶ö‡ßá ‡¶°‡¶æ‡¶®", callback_data="bottom_right")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text("‡¶≤‡ßã‡¶ó‡ßã ‡¶ï‡ßã‡¶•‡¶æ‡ßü ‡¶¨‡¶∏‡¶æ‡¶§‡ßá ‡¶ö‡¶æ‡¶ì?", reply_markup=reply_markup)

# ‡¶™‡¶ú‡¶ø‡¶∂‡¶® ‡¶π‡ßç‡¶Ø‡¶æ‡¶®‡ßç‡¶°‡¶≤‡¶æ‡¶∞
async def handle_position(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    user_id = query.from_user.id

    if user_id not in user_sessions or "logo_path" not in user_sessions[user_id]:
        await query.edit_message_text("‚ö†Ô∏è ‡¶Ü‡¶ó‡ßá ‡¶≠‡¶ø‡¶°‡¶ø‡¶ì ‡¶≤‡¶ø‡¶ô‡ßç‡¶ï ‡¶Ü‡¶∞ ‡¶≤‡ßã‡¶ó‡ßã ‡¶™‡¶æ‡¶†‡¶æ‡¶ì‡•§")
        return

    user_sessions[user_id]["position"] = query.data
    await query.edit_message_text("‚è≥ ‡¶≠‡¶ø‡¶°‡¶ø‡¶ì ‡¶™‡ßç‡¶∞‡¶∏‡ßá‡¶∏ ‡¶π‡¶ö‡ßç‡¶õ‡ßá...")

    await process_video(user_id, query)

# ‡¶™‡ßç‡¶∞‡¶∏‡ßá‡¶∏ ‡¶≠‡¶ø‡¶°‡¶ø‡¶ì
async def process_video(user_id, query):
    data = user_sessions[user_id]
    video_url = data["video_url"]
    logo_path = data["logo_path"]
    position = data["position"]

    video_path = os.path.join(tempfile.gettempdir(), f"{uuid4()}.mp4")
    output_path = os.path.join(tempfile.gettempdir(), f"{uuid4()}.mp4")

    # Download video
    ydl_opts = {"outtmpl": video_path, "format": "mp4"}
    with YoutubeDL(ydl_opts) as ydl:
        ydl.download([video_url])

    # Apply filter + overlay using ffmpeg
    apply_ffmpeg_filter(video_path, output_path, logo_path, position)

    # Send video
    await query.message.reply_video(video=open(output_path, "rb"))

    # Cleanup
    for path in [video_path, output_path, logo_path]:
        if os.path.exists(path):
            os.remove(path)

    del user_sessions[user_id]

# Main app
if __name__ == "__main__":
    app = Application.builder().token(TOKEN).build()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_link))
    app.add_handler(MessageHandler(filters.PHOTO, handle_logo))
    app.add_handler(CallbackQueryHandler(handle_position))

    # Webhook setup
    port = int(os.environ.get("PORT", 8080))
    app.run_webhook(
        listen="0.0.0.0",
        port=port,
        url_path=TOKEN,
        webhook_url=f"{WEBHOOK_URL}/{TOKEN}"
    )
